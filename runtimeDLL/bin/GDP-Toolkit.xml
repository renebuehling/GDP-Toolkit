<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GDP-Toolkit</name>
    </assembly>
    <members>
        <member name="T:GameDevProfi.Utils.Animation">
            <summary>
            Contains utilities for animation calculation.
            </summary>
        </member>
        <member name="M:GameDevProfi.Utils.Animation.timeScale01(System.Single)">
            <summary>
            Maps <code>Time.time</code> to a scale of [0..1] when a interval 
            of <code>duration</code> seconds is intended.
            
            This is a reminder/shortcut helper, i.e. for using AnimationCurves:
            - Define an AnimationCurve with keyframes with from 0 to 1 (horizontal axis).
            - If you want to get the animation curve value with having one animation cycle be mapped to 2 seconds, use:
             <code>animationCurve.Evaluate(Utils.timeScale(2f));</code>
            
            </summary>
            <param name="duration">Desired animation duration in seconds.</param>
            <returns>A value between 0 and 1.</returns>
        </member>
        <member name="M:GameDevProfi.Utils.Animation.timeScale01(System.Single,System.Single)">
            <summary>
            Maps the given <code>time</code> to a scale of [0..1] when a interval 
            of <code>duration</code> seconds is intended.
            
            This is a reminder/shortcut helper, i.e. for using AnimationCurves:
            - Define an AnimationCurve with keyframes with from 0 to 1 (horizontal axis).
            - If you want to get the animation curve value with having one animation cycle be mapped to 2 seconds, use:
             <code>animationCurve.Evaluate(Utils.timeScale(Time.time,2f));</code>
            
            </summary>
            <param name="time">Time stamp, usually something like <code>Time.time</code>.</param>
            <param name="duration">Desired animation duration in seconds.</param>
            <returns>A value between 0 and 1.</returns>
        </member>
        <member name="M:GameDevProfi.Utils.Animation.eval(UnityEngine.AnimationCurve,System.Single)">
            <summary>
            Returns the y value from the given curve if the curve
            should be mapped to a total length of <code>duration</code> seconds.
            Uses <code>timeScale01(Time.time,duration)</code>.
            </summary>
            <param name="curve">Curve.</param>
            <param name="duration">Duration.</param>
            <returns>Current curve value.</returns>
        </member>
        <member name="T:GameDevProfi.Utils.Colors">
            <summary>
            Shortcuts to color modifications.
            </summary>
        </member>
        <member name="M:GameDevProfi.Utils.Colors.invert(UnityEngine.Color)">
            <summary>
            Returns the inverted color. This is black for white, purple for yellow, green for red, etc.
            </summary>
            <param name="c">Color to invert.</param>
            <returns>Inverse color</returns>
        </member>
        <member name="M:GameDevProfi.Utils.Colors.changeAlpha(UnityEngine.Color,System.Single,System.Boolean)">
            <summary>
            Changes the alpha value of a given color.
            </summary>
            <param name="c">Color to copy rgb from.</param>
            <param name="value">New alpha value.</param>
            <param name="incremental">If true, value will be added to the current alpha of the color. If false, value will be assigned as new alpha value of the color.</param>
            <returns>Copy of color with changed alpha value.</returns>
            <seealso cref="M:GameDevProfi.Utils.UI.changeAlpha(UnityEngine.UI.Graphic,System.Single,System.Boolean)"/>
        </member>
        <member name="T:GameDevProfi.Utils.DLL">
            <summary>
            Contains helpers for working with a custom C# DLL.
            </summary>
        </member>
        <member name="M:GameDevProfi.Utils.DLL.listAllResources(System.Reflection.Assembly)">
            <summary>
            Creates a list of all resources like images that are embedded in the DLL.
            Use this method for debugging and find valid resourceName parameters
            for <see cref="!:LoadImageResource(string, int, int)"/>.
            </summary>
            <returns>A dump of the loadable embedded resources.</returns>
        </member>
        <member name="M:GameDevProfi.Utils.DLL.LoadImageResource(System.String,System.Int32,System.Int32,System.Reflection.Assembly)">
            <summary>
            Loads an image embedded in the DLL into a Unity texture.
            Use listAllResources() to find the resources available for load by this method. 
            Note: The method uses the assembly of the calling script, which usually is
            the DLL that you want resources to load from.
            </summary>
            <param name="resourceName">Name of the image to load. This is usally made of default project namespace (see project properties) plus folders (separated by dot) plus the actual filename.</param>
            <param name="width">Width of the result image. This is usually the same as the size of the resource itself.</param>
            <param name="height">Height of the result image. This is usually the same as the size of the resource itself.</param>
            <returns>Image as texture or null if not loadable.</returns>
        </member>
        <member name="M:GameDevProfi.Utils.DLL.LoadImageResource(System.String,System.Int32,System.Int32,UnityEngine.Color,System.Reflection.Assembly)">
            <summary>
            Loads an image embedded in the DLL into a Unity texture.
            Use listAllResources() to find the resources available for load by this method. 
            Note: The method uses the assembly of the calling script, which usually is
            the DLL that you want resources to load from.
            </summary>
            <param name="resourceName">Name of the image to load. This is usally made of default project namespace (see project properties) plus folders (separated by dot) plus the actual filename.</param>
            <param name="width">Width of the result image. This is usually the same as the size of the resource itself.</param>
            <param name="height">Height of the result image. This is usually the same as the size of the resource itself.</param>
            <param name="fallbackColor">If the resource cannot be loaded a dummy image of size <code>width</code> x <code>height</code> is created and filled with this color.</param>
            <returns>Image as texture or image colored <c>fallbackColor</c> if not loadable.</returns>
        </member>
        <member name="M:GameDevProfi.Utils.DLL.ReadToEnd(System.IO.Stream)">
            <summary>
            Helper to read a the stream.
            </summary>
            <param name="stream">Stream</param>
            <returns>Contents as byte array.</returns>
        </member>
        <member name="T:GameDevProfi.Utils.SpaceTool">
            <summary>
            Utility for spatial calculations.
            This class can be used in a static way by calling the static methods
            or in an instance way by creating a Space instance and calling the methods on this object.
            Main difference is only that the object can store the self parameter so that 
            there is no need to pass it as parameter to every method. 
            
            Decision help: 
            Use static methods when you only want to make a few measures, especially when these are for different objects.
            Create an object when you need multiple calculations on the same object.
            
            </summary>
        </member>
        <member name="F:GameDevProfi.Utils.SpaceTool.self">
            <summary>
            Cache to an object which will be passed as <c>self</c> parameter to the static functions.
            This is usually the object the measure relates to, i.e. the player character when you want to check if a player is near something.
            </summary>
        </member>
        <member name="M:GameDevProfi.Utils.SpaceTool.#ctor(UnityEngine.Transform)">
            <summary>
            Create a new Space measurement tool and store the given element 
            as starting point for measures.
            </summary>
            <param name="self">The first object to be passed to the measurements methods as <c>self</c> parameter.</param>
        </member>
        <member name="M:GameDevProfi.Utils.SpaceTool.#ctor(UnityEngine.GameObject)">
            <summary>
            Create a new Space measurement tool and store the given element's <c>transform</c> property
            as starting point for measures.
            </summary>
            <param name="self">The first object to be passed to the measurements methods as <c>self</c> parameter.</param>
        </member>
        <member name="M:GameDevProfi.Utils.SpaceTool.#ctor(UnityEngine.MonoBehaviour)">
            <summary>
            Create a new Space measurement tool and store the given element's <c>transform</c> property
            as starting point for measures.
            </summary>
            <param name="self">The first object to be passed to the measurements methods as <c>self</c> parameter.</param>
        </member>
        <member name="M:GameDevProfi.Utils.SpaceTool.distanceTo(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            Shortcut for measuring the distance between two objects.
            </summary>
            <param name="self">First object.</param>
            <param name="other">Another object.</param>
            <returns>The distance between the two objects, by measuring distance of transform origins.</returns>
            <see cref="M:GameDevProfi.Utils.SpaceTool.distanceTo(UnityEngine.Transform)"/>
            <see cref="M:GameDevProfi.Utils.SpaceTool.distanceTo(UnityEngine.MonoBehaviour)"/>
        </member>
        <member name="M:GameDevProfi.Utils.SpaceTool.distanceTo(UnityEngine.Transform)">
            <summary>
            Shortcut for measuring the distance between <see cref="F:GameDevProfi.Utils.SpaceTool.self"/> and another object.
            </summary>
            <param name="other">Other object. </param>
            <returns>Distance between <c>self</c> and <c>other</c>.</returns>
            <see cref="M:GameDevProfi.Utils.SpaceTool.distanceTo(UnityEngine.Transform,UnityEngine.Transform)"/>
        </member>
        <member name="M:GameDevProfi.Utils.SpaceTool.distanceTo(UnityEngine.MonoBehaviour)">
            <summary>
            Shortcut for measuring the distance between <see cref="F:GameDevProfi.Utils.SpaceTool.self"/> and another object.
            </summary>
            <param name="other">Other object. </param>
            <returns>Distance between <c>self</c> and <c>other</c>.</returns>
            <see cref="M:GameDevProfi.Utils.SpaceTool.distanceTo(UnityEngine.Transform,UnityEngine.Transform)"/>
        </member>
        <member name="M:GameDevProfi.Utils.SpaceTool.isDistanceTo(UnityEngine.Transform,UnityEngine.Transform,System.Single)">
            <summary>
            Shortcut to test if an object is close to another object.
            </summary>
            <param name="self">First object.</param>
            <param name="other">The other object.</param>
            <param name="range">Maximum distance of the other object to make this function return true.</param>
            <returns>True if <c>other</c> is no more than <c>range</c> units away from <c>self</c>.</returns>
            <see cref="M:GameDevProfi.Utils.SpaceTool.isDistanceTo(UnityEngine.Transform,System.Single)"/>
        </member>
        <member name="M:GameDevProfi.Utils.SpaceTool.isDistanceTo(UnityEngine.Transform,System.Single)">
            <summary>
            Shortcut to test if an object is close to another object.
            </summary>
            <param name="other">The other object.</param>
            <param name="range">Maximum distance of the other object to make this function return true.</param>
            <returns>True if <c>other</c> is no more than <c>range</c> units away from <c>self</c>.</returns>
            <see cref="M:GameDevProfi.Utils.SpaceTool.isDistanceTo(UnityEngine.Transform,UnityEngine.Transform,System.Single)"/>
        </member>
        <member name="M:GameDevProfi.Utils.SpaceTool.directionFrom(UnityEngine.Transform,UnityEngine.Transform)">
            <summary>
            Calculates the direction vector from a given object towards the cow.
            </summary>
            <param name="other">Object to look from.</param>
            <param name="self">Object to look at.</param>
            <returns>Vector describing the direction from <c>other</c> towards <c>self</c>.</returns>
            <see cref="M:GameDevProfi.Utils.SpaceTool.directionFrom(UnityEngine.Transform)"/>
        </member>
        <member name="M:GameDevProfi.Utils.SpaceTool.directionFrom(UnityEngine.Transform)">
            <summary>
            Calculates the direction vector from a given object towards the cow.
            </summary>
            <param name="other">Object to look from.</param>
            <param name="self">Object to look at.</param>
            <returns>Vector describing the direction from <c>other</c> towards <c>self</c>.</returns>
            <see cref="M:GameDevProfi.Utils.SpaceTool.directionFrom(UnityEngine.Transform,UnityEngine.Transform)"/>
        </member>
        <member name="T:GameDevProfi.Utils.UI">
            <summary>
            Utilities related to UI programming using 
            Unity's new GUI system.
            </summary>
        </member>
        <member name="M:GameDevProfi.Utils.UI.projectCoordinates(UnityEngine.RectTransform,UnityEngine.RectTransform)">
            <summary>
            Calculates the position from a gui element into another UI coordinate space. 
            </summary>
            <param name="fromObj">Desired position, the position that we want to map into the other space.</param>
            <param name="to">Target coordinate space, the parent of the element that we want to move to overlay <c>fromObj</c>.</param>
            <returns>The localPosition relative to <c>to</c> that matches an overlay position to <c>fromObj</c>.</returns>
            <seealso cref="!:https://forum.unity3d.com/threads/find-anchoredposition-of-a-recttransform-relative-to-another-recttransform.330560/#post-2702014"/>
        </member>
        <member name="M:GameDevProfi.Utils.UI.scrollJumpTo(UnityEngine.UI.ScrollRect,UnityEngine.GameObject,System.Boolean,System.Boolean)">
            <summary>
            Scrolls immediately to a given object in the scrollview.
            
            <b>Important:</b> 
            Unity UI's scrolling component and UI setup is complex and full of variations. Therefore this
            function may not always give the expected results. Simply try it. If it does not work, you may copy the
            implementation of this function into your own code and customize as needed.
            </summary>
            <param name="scrollRect">ScrollView that should perform the scrolling.</param>
            <param name="focusObject">Object to scroll to. Must be a child of scrollRect's content object.</param>
            <param name="keepX">If true, scrolling does not apply to X.</param>
            <param name="keepY">If true, scrolling does not apply to Y.</param>
            <seealso cref="!:https://stackoverflow.com/questions/30766020/how-to-scroll-to-a-specific-element-in-scrollrect-with-unity-ui"/>
        </member>
        <member name="M:GameDevProfi.Utils.UI.changeAlpha(UnityEngine.UI.Graphic,System.Single,System.Boolean)">
            <summary>
            Changes the alpha value of a Graphic's color.
            This is a shortcut to apply <see cref="M:GameDevProfi.Utils.Colors.changeAlpha(UnityEngine.Color,System.Single,System.Boolean)"/>
            to the Graphic's color.
            </summary>
            <param name="g">Graphic to change, i.e. a Button, Image, etc.</param>
            <param name="value">New alpha value or change to apply to the alpha value (see incremental parameter).</param>
            <param name="incremental">If true, value will be added to the current alpha of the color. If false, value will be assigned as new alpha value of the color.</param>
            <see cref="M:GameDevProfi.Utils.Colors.changeAlpha(UnityEngine.Color,System.Single,System.Boolean)"/>
        </member>
        <member name="T:GameDevProfi.Utils.WatchForError">
            <summary>
            Utility to track Unity's errors which cannot be caught by exception catching. 
            </summary>
            <remarks>
            <para>
            Example Use Case:  <br/>
            When loading a scene which is not included in the build, Unity will just add an
            error message to output saying <c>Scene '...' couldn't be loaded because it has not been added to the build settings or the AssetBundle has not been loaded.</c>
            </para>
            <para>
            A way to react on scene loading failure is to attach an log message output recorder
            to the application and see if an error occurs while the scene loading attemp is running.
            This is what this class does.
            </para>
            <para>
            Usage:
            <list type="bullets">
            <item>Create and start an instance of <c>WatchForError</c> right before the critical line of code. Use <c>WatchForError.startNew()</c> for this.</item>
            <item>Call <c>stop()</c> right after the critical line.</item>
            <item>Look at the number of <c>errors</c> and react accordingly.</item>
            </list>
            </para>
            <para>
            Example:<br/>
            <code>
            WatchForError watch = WatchForError.startNew();
            SceneManager.LoadScene("NonExistingLevel"); 
            if (watch.stop().errors>0) Debug.Log("Scene could not be loaded.");
            </code>
            </para>
            </remarks>
        </member>
        <member name="M:GameDevProfi.Utils.WatchForError.startNew">
            <summary>
            Creates a new instance which is started automatically.
            </summary>
            <returns>New Watcher.</returns>
        </member>
        <member name="F:GameDevProfi.Utils.WatchForError.errors">
            <summary>Number of errors recorded since start/creation of object.</summary>
        </member>
        <member name="F:GameDevProfi.Utils.WatchForError.warnings">
            <summary>Number of warnings recorded since start/creation of object.</summary>
        </member>
        <member name="M:GameDevProfi.Utils.WatchForError.#ctor">
            <summary>Creates a new instance and calls start().</summary>
        </member>
        <member name="M:GameDevProfi.Utils.WatchForError.Finalize">
            <summary>Unregisters any listeners by calling stop() on destruction.</summary>
        </member>
        <member name="M:GameDevProfi.Utils.WatchForError.start">
            <summary>
            Starts recording of messages. It is <b>not</b> necessary to call
            this command usually, as it is automatically called on object creation.
            Use <c>start()</c> only to resume an observation after calling <c>stop()</c>.
            </summary>
            <returns>This object.</returns>
        </member>
        <member name="M:GameDevProfi.Utils.WatchForError.stop">
            <summary>
            Stops recording of messages. Automatically called on destruction. 
            </summary>
            <returns>This object.</returns>
        </member>
        <member name="M:GameDevProfi.Utils.WatchForError.Application_logMessageReceived(System.String,System.String,UnityEngine.LogType)">
            <summary>
            Implements the recording.
            </summary>
            <param name="condition"></param>
            <param name="stackTrace"></param>
            <param name="type"></param>
        </member>
        <member name="T:GameDevProfi.Utils.WebForm">
            <summary>
            Encapsulates simple http submit requests and adds some basic error handling.
            </summary>
        </member>
        <member name="F:GameDevProfi.Utils.WebForm.formData">
            <summary>
            Cache of the form data collected with Add methods.
            </summary>
        </member>
        <member name="F:GameDevProfi.Utils.WebForm.URL">
            <summary>
            Cache of the URL to which the data is submitted.
            Defined in constructor.
            </summary>
        </member>
        <member name="M:GameDevProfi.Utils.WebForm.#ctor(System.String)">
            <summary>
            Creates a new helper to post data to a www URL, i.e. a php script.
            </summary>
            <param name="URL">Address where the data is submitted to, something like http://www.example.com/file.php </param>
        </member>
        <member name="M:GameDevProfi.Utils.WebForm.Add(System.String,System.String)">
            <summary>
            Safely adds data to be submitted to the URL.
            This method skips the parameter if value is an empty string.
            When directly adding the data with a new MultipartFormDataSection object, 
            adding an empty parameter causes an error.
            </summary>
            <param name="key">Name of the parameter</param>
            <param name="value">Value to submit</param>
        </member>
        <member name="M:GameDevProfi.Utils.WebForm.Add(System.String,System.Int32)">
            <summary>
            Integer version of <see cref="M:GameDevProfi.Utils.WebForm.Add(System.String,System.String)"/>.
            </summary>
            <param name="key">Name of the parameter</param>
            <param name="value">Value to submit</param>
        </member>
        <member name="M:GameDevProfi.Utils.WebForm.Add(System.String,System.Object)">
            <summary>
            Any object version of <see cref="M:GameDevProfi.Utils.WebForm.Add(System.String,System.String)"/>.
            </summary>
            <param name="key">Name of the parameter</param>
            <param name="value">Value to submit. If null, nothing happens, else result of toString() will be added.</param>
        </member>
        <member name="M:GameDevProfi.Utils.WebForm.Add(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            List version of <see cref="M:GameDevProfi.Utils.WebForm.Add(System.String,System.Object)"/>.
            </summary>
            <param name="items">Key-Value pairs to submit.</param>
        </member>
        <member name="F:GameDevProfi.Utils.WebForm.result">
            <summary>
            Contains the submission results. This field should always carry
            an object an never be null. You can use <code>result.isDone</code>
            to test if the submission was already completed.
            </summary>
        </member>
        <member name="F:GameDevProfi.Utils.WebForm.successful">
            <summary>
            Tiny helper that will be true if the submission was successful
            and false when there was an error. Note: This makes sense only
            after the submission was completed.
            </summary>
        </member>
        <member name="F:GameDevProfi.Utils.WebForm.recentError">
            <summary>
            Contains the recently recorded error, i.e. problems that caused
            <see cref="F:GameDevProfi.Utils.WebForm.successful"/> to be <c>false</c>.
            Note that this might be updated late: It may contain old information
            while submission is still running.
            </summary>
        </member>
        <member name="F:GameDevProfi.Utils.WebForm.recentResult">
            <summary>
            Text version of the content received. 
            This may be the html code of a site etc.
            In case of an error this might give additional insights on the problem.
            </summary>
        </member>
        <member name="M:GameDevProfi.Utils.WebForm.submit">
            <summary>
            Performs the request, waits for it and updates <see cref="F:GameDevProfi.Utils.WebForm.successful"/>
            and <see cref="F:GameDevProfi.Utils.WebForm.result"/>.
            </summary>
            <returns>Enumerator for Unity coroutine.</returns>
        </member>
        <member name="M:GameDevProfi.Utils.WebForm.resultAsJSON``1(System.Boolean)">
            <summary>
            Tries to parse the result that the server sent back after <see cref="M:GameDevProfi.Utils.WebForm.submit"/>
            from a JSON structure into an object.
            </summary>
            <typeparam name="T">Class that should be instantiated and populated with the data from received JSON structure.</typeparam>
            <param name="fallBackToNew">If true, a new object of class T will be created and returned in case of an error. Otherewise T's default will be returned (this is probably null).</param>
            <returns>A new instance of T which fields are initialized with the data from JSON or a fallback object in case of error (see parameter fallBackToNew).</returns>
        </member>
        <member name="T:GameDevProfi.Utils.XML">
            <summary>
            Utilities related to XML processing.
            </summary>
        </member>
        <member name="M:GameDevProfi.Utils.XML.Save(System.Object)">
            <summary>
            Serializes the given object into a string in UTF-8 encoding.
            </summary>
            <param name="data">Object to save.</param>
            <returns>Serialization string.</returns>
            <see cref="!:http://tech.pro/tutorial/798/csharp-tutorial-xml-serialization"/>
            <see cref="!:http://wiki.unity3d.com/index.php?title=Saving_and_Loading_Data:_XmlSerializer"/>
        </member>
        <member name="M:GameDevProfi.Utils.XML.Load(System.String,System.Type)">
            <summary>
            Loads an object from a string in UTF-8 encoding.
            </summary>
            <param name="xml">XML sourcecode.</param>
            <param name="dataType">Class that should be instanced. (You may use typeof(Class) or obj.getType() get the required type.)</param>
            <returns>The new object or null in case of problems.</returns>
            <see cref="!:http://tech.pro/tutorial/798/csharp-tutorial-xml-serialization"/>
            <see cref="!:http://wiki.unity3d.com/index.php?title=Saving_and_Loading_Data:_XmlSerializer"/>
            <see cref="M:GameDevProfi.Utils.XML.Load``1(System.String)"/>
        </member>
        <member name="M:GameDevProfi.Utils.XML.Load``1(System.String)">
            <summary>
            Loads an object from a string in UTF-8 encoding.
            Same as <see cref="M:GameDevProfi.Utils.XML.Load(System.String,System.Type)"/> 
            with typeparam notation.
            </summary>
            <typeparam name="T">Deserialization type, class that should be instanced.</typeparam>
            <param name="xml">XML sourcecode.</param>
            <returns>The new object, deserialized from xml.</returns>
        </member>
    </members>
</doc>
